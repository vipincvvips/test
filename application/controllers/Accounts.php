<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');class Accounts extends CI_Controller {    function __construct() {        parent::__construct();        if (!$this->tank_auth->is_logged_in()) {            redirect('auth/login/');        }        $this->load->model('Account');        $this->load->model('Common');    }    function index() {        $data['main_content'] = 'sub-accounts/manage-sub-accounts';        $this->load->view('main_content', $data);    }    function manage() {    $this->datatables->select('s.id, s.full_name, s.email, s.phonenumber, s.dateofbirth, s.country');        $this->datatables->from(TBL_MASTER . ' s')          ->unset_column('s.id')                ->where('s.role_id !=', 0)                ->add_column('action', $this->action_row('$1'), 's.id');        echo $this->datatables->generate();    }    function action_row($id) {        $action = <<<EOF            <div class="tooltip-top">                <a data-original-title="Edit Detail" data-placement="top" data-toggle="tooltip" href="Accounts/edit/{$id}" class="btn btn-xs btn-default btn-equal edit_btn open_my_form_form" data-control="Accounts" data-id="{$id}" id="teacher_edit_{$id}"><i class="fa fa-pencil"></i></a>                <a data-original-title="Remove Detail" data-placement="top" data-toggle="tooltip" href="javascript:" class="btn btn-xs btn-default btn-equal delete_btn"  data-control="Accounts"  data-method="remove" data-id="{$id}" id="teacher_{$id}"><i class="fa fa-trash-o"></i></a>            </div>EOF;        return $action;    }       public function check_dob_exist($dob) {         if(!empty($dob)) {          if (date('Y-m-d', strtotime($dob)) <= date('Y-m-d')) {                 return TRUE;            } else {                  $this->form_validation->set_message('check_dob_exist',"Please enter valid Date of Birth");                return FALSE;            }        }}      public function check_uk_phone($phoneno) {         if(!empty($phoneno)) {$pattern = "/^(\+44\s?7\d{3}|\(?07\d{3}\)?)\s?\d{3}\s?\d{3}$/";$match = preg_match($pattern,$phoneno);if ($match != false) {    return TRUE;} else {    $this->form_validation->set_message('check_uk_phone',"Invalid Phone number");}}}    function submit_form() {        if ($this->input->post()) {            $response = array("status" => "error", "heading" => "Unknown Error", "message" => "There was an unknown error that occurred. You will need to refresh the page to continue working.");            $error_element = error_elements();            $this->form_validation                       ->set_rules('firstname', 'First Name', 'trim|required')                    ->set_rules('lastname', 'Last Name', 'trim|required')        ->set_rules('dateofbirthz',  'Date of Birth', 'trim|required|callback_check_dob_exist')        ->set_rules('phonenumber', 'Contact Number', 'trim|required|callback_check_uk_phone')        ->set_rules('email', 'Email id', 'trim|required|valid_email')                    ->set_rules('country', 'Country', 'trim|required')                    ->set_rules('subscription', 'subscription',  'trim|required')                    ->set_error_delimiters($error_element[0], $error_element[1]);            if ($this->form_validation->run()) {                $id = $this->input->post('id');                if ($this->Account->check_email($this->input->post('email'), $id)):                    $response['heading'] = 'Emailid already exists';                    $response['message'] = 'Emailid already exists, Use another one..!';                    echo json_encode($response);                    die;                endif;   $post_data = array(                                               'email' => $this->input->post('email'),                        'full_name' => $this->input->post('firstname').$this->input->post('lastname'),                        'firstname' => $this->input->post('firstname'),                        "lastname" => $this->input->post('lastname'),                        "phonenumber" => $this->input->post('phonenumber'),                        "dateofbirth" => $this->input->post('dateofbirthz'),                        "country" => $this->input->post('country'),                        "subscription" => $this->input->post('subscription'),                        "username" => $this->input->post('email'),                        "is_active" => $this->input->post('is_active'),                    );                if ($id > 0):                    if ($this->input->post('password') != "") {                      $hasher = new PasswordHash(                                $this->config->item('phpass_hash_strength', 'tank_auth'), $this->config->item('phpass_hash_portable', 'tank_auth'));                        $hashed_password = $hasher->HashPassword($this->input->post('password'));                        $post_data['password'] = $hashed_password;                    }                    if ($this->Account->update_account($post_data, $id)):                        $response = array("status" => "ok", "heading" => "Updated successfully...", "message" => "Details updated successfully.");                    else:                        $response = array("status" => "error", "heading" => "Not Updated...", "message" => "Details not updated successfully.");                    endif;                endif;            } else {                $response = array("status" => "error", "heading" => "Validation Error", "message" => "Please fill the required fields.");                $errors = $this->form_validation->error_array();                $response['error'] = $errors;            }            echo json_encode($response);            die;        }    }     function edit($id) {        $data_found = 0;        $data["empid_generated"] = '';        if ($id > 0) {            $emp_obj = $this->Account->get_account($id);            if (is_object($emp_obj)) {                $data["emp_info"] = $emp_obj;                $data["id"] = $id;                $data_found = 1;            }        }        if ($data_found == 0) {            $this->session->set_flashdata('error_msg', 'Unknown Error, There was an unknown error that occurred. You will need to refresh the page to continue working.');            redirect('employee/');        }        $data["branch_array"] = array();        $data["role_array"] = array();        $this->load->view('sub-accounts/sub-account-form', $data);    }           }?>